* Summary
rsyscall provides an interface to an ever-growing subset of Linux system calls. This interface is:
- *process-independent*: all system calls are called as methods on process objects,
  which can refer to the "local" process or to other processes under our control.
- *type-safe*: many Linux API constraints, which are usually left to user code to enforce,
  are made explicit in the type system.
- *low-level*: any action which is possible with the underlying Linux APIs,
  is possible with rsyscall; nothing is forbidden or discouraged.

For more detail on the concepts and motivation behind rsyscall,
read the [[file:docs/conceptual.org][conceptual introduction]].
* Quick Start
Check out the docs at [[http://rsyscall.org/rsyscall][rsyscall.org]].

Note that the rsyscall Python API uses some recent Python 3 features:
async/await and type annotations.
If you haven't seen those before, skim the [[file:docs/background.org][background tutorial]] first.
* Installation
There's no official release of rsyscall yet.

But, if you want to try it, you can do so with Nix:
#+begin_src bash
git clone https://github.com/catern/rsyscall
cd rsyscall/python
nix-shell
python
#+end_src
