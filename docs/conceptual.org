#+title: Conceptual Introduction
In most operating system APIs, when you run a syscall,
you implicitly operate on the current process.
In rsyscall, we explicitly specify the process in which we want to run a syscall.

We refer to the processes in which we can run syscalls as "threads".[fn:clonethread]
For rsyscall to create a new thread in which the user can run syscalls,
it starts a process running the "rsyscall server stub",
which reads syscall requests from a file descriptor and sends back responses.

Several parts of the Linux API are non-trivial to use in such an environment;
fork, clone and exec, among others.
We have designed and implemented clean methods for using such syscalls,
and make them all available to the user.

The rsyscall API allows us to initialize new processes in a new way.
Some other systems specify all the characteristics of the new process up front,
like NT's =CreateProcess= or POSIX's =posix_spawn=;
but that requires explicit support for everything we want to change about the new process.
Still other systems copy the attributes for the new process from the current process, like =fork=;
but [[https://lwn.net/Articles/785430/][that's inefficient]].

rsyscall allows you to create a new process which shares everything
(address space, file descriptor tables, etc)
with the current process, and so is cheap to create, as with traditional threading models.
Then, you can mutate this process by calling arbitrary syscalls inside of it,
and gradually unshare things through calls to =unshare= and =execve=.
This is more efficient than =fork=, and more powerful than =posix_spawn=.

Besides the efficiency benefit,
there's also a comprehensibility benefit of rsyscall
relative to =fork= (and similar calls like =vfork=).
=fork= is a single system call which returns twice,
and splits your program into two contexts of execution;
among other things, this makes it difficult to coordinate actions between both contexts.

In rsyscall there is a single running program,
which is a completely conventional straight-line program.
This single running program explicitly acts on both processes in a "single-threaded" manner,
freely interleaving actions in either process.
For example, 
one line can open a file in the child process,
then the next line can use that file in the parent process,
since the file descriptor table is shared.

In the classification of threading systems as [[https://en.wikipedia.org/wiki/Thread_(computing)#Models]["1:1", "N:1", and "M:N"]],
rsyscall is in a new category: "1:N".
A single "application-level thread" maps on to multiple "kernel-level entities".
This is possible and useful because
we explicitly denote which "kernel-level entity" (which process)
we want to run a syscall in.

In addition to the process creation and manipulation benefits,
we also provide robust, wide-ranging, low-level support for many Linux features.
rsyscall is useful for writing many kinds of scripts and applications
which make heavy use of the Linux API.
Such programs don't have to give up on high-level language features and use C,
nor do they have to use other languages 
with complex runtimes that can silently interfere with features like =unshare= and =clone=.

We've implemented the rsyscall API initially in Python,
along with a limited C API,
to maximize its usability.

In Python, we treat each syscall as a method on some object,
such as Thread or FileDescriptor or ChildProcess.
We've also used the type annotation features of Python 3.
This is idiomatic for Python,
but we'd love to support other languages.
Other languages will likely have different approaches to the API.
If you'd like to work on supporting other languages, just file an issue.
Any language is interesting, but particularly interesting would be
languages with rich type systems,
like Haskell and OCaml,
and languages that currently have poor APIs for interacting with Linux,
like Java.

To learn more about the specifics of the API,
and see what it looks like in action,
return to the [[file:~/.local/src/rsyscall/intro.org][introduction]] and read on.

* Footnotes

[fn:clonethread]
With most threading implementations on Linux,
such as glibc's current pthreads implementation NPTL,
each "thread" is really a separate process.
Each "thread" process is started with CLONE_THREAD
to make the collection of processes appear more like a single process.
Even before CLONE_THREAD was added, glibc's pthreads implementation was LinuxThreads,
which implements each thread with a separate process, without using CLONE_THREAD.

rsyscall's threads do not use CLONE_THREAD, so it's more like LinuxThreads;
although unlike LinuxThreads, we are not constrained by compatibility with the pthreads API;
for example, we don't need to hide the fact that each of our threads has a different pid.
