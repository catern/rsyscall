Nothing in this document is specific to rsyscall.

* async
We don't use any actual async features in the tutorials,
so you can just completely ignore the presence of the "async" and "await" keywords;
everything we're doing is equivalent to regular, non-async Python.

Python 3 async/await syntax looks like this:
#+BEGIN_SRC python
async def f(x):
    return await some_library_function(x, x)

async def main():
    print(await f("hello"))
#+END_SRC


For more information on async/await syntax in Python,
check out the [[https://trio.readthedocs.io/en/latest/tutorial.html][trio tutorial]].
While rsyscall uses trio,
it isn't necessary or useful to know anything about the trio library itself to use rsyscall.
As shown in the [[file:single_threaded.org][single-threaded tutorial]],
rsyscall provides its own interfaces for IO,
and makes no use of trio's interfaces for IO.
* types
Likewise, you can ignore the Python 3 type annotations in the tutorials;
in Python, type annotations are purely for use by static analyzers, and have no runtime significance.

Python 3 type annotations appear in function declarations like this:
#+BEGIN_SRC python
def f(x: int, y: str, z: t.List[str]) -> str: ...
#+END_SRC

For more information on type annotations in Python,
check out the [[https://mypy.readthedocs.io/en/stable/getting_started.html][mypy manual]].
