* desirable kernel features
** notification of exec (more specifically: mm_release) through wait
   This way we can detect when a child task has called exec,
   and free any resources that the child was using in shared address spaces/namespaces/fd tables.
   Without this, there's no good way to know for sure that they're done execing.

   Currently I'm using CLONE_CHILD_CLEARTID and monitoring the resulting futex.
   Using futexes from an event loop is quite painful though;
   currently I'm just starting one task to monitor each futex,
   which doubles the number of tasks I'm run.

   Things which don't work:
   - ptrace doesn't work because ptrace sucks and break gdb/strace.
   - Passing down one end of a cloexec pipe doesn't work because if we're a CLONE_FILES process calling exec,
     the end will still be open in other processes.
   - Various privileged interfaces don't work because they're privileged.
   - vfork is interestingly close but ultimately doesn't work since it's not actually parallel;
     I investigated it in https://github.com/catern/sfork
** a CLOSE_RANGE_DO_CLOEXEC flag for close_range to close only CLOEXEC files
   This way we can clean up a newly created fd table (e.g. created by fork/clone/unshare)
   and remove any file descriptors which should not be inherited (e.g. private process-specific file descriptors),
   while still retaining the ability to implicitly inherit file descriptors
   in the same way environment variables are inherited.

   The need to clean up an fd table after fork is well known,
   but why do we want to implicitly inherit file descriptors?
   Well, for example, we might mention a file descriptor in an environment variable that is read by some library.
   In the same way that customizing libraries via environment variables is useful,
   we want to be able to pass resources down to libraries without processes being explicitly aware.
   This implicit inheritance matches how root, cwd, =/dev/tty=, and other resources are implicitly inherited today,
   so they could be replaced with more formal file descriptor capabilities.
   And we could change env vars like DISPLAY/WAYLAND_DISPLAY to, instead of containing an address,
   contain the file descriptor number to use when connecting to X/Wayland.
** a CLONE_TERMINATE_ON_CLOSE and an inheritable PR_SET_PDEATHSIG
   Basically what's described in the "Long term" section in http://catern.com/process.html#org1a3bd92.
** bindat, connectat
   That is, versions of bind and connect which take a dirfd and work with AT_EMPTY_PATH.
   One can do this today with /proc, but then /proc needs to be mounted.

   At the same time (as part of this compatibility break),
   lifting the Unix socket address length limit would be good.
*** stretch goal: extend these to work with INET sockets
    We should be able to represent a sockaddr_in with a file descriptor.

    Right now, we call =accept= on a nice, capability-safe file descriptor;
    but we call =connect= on an arbitrary name.
    You should be able to =connect= to a capability representing a network location.

    They two calls are symmetric in what they return:
    they both give you back a connected file descriptor.
    But they're not symmetric in what arguments they take.
    They should be!
** the ability to take existing memory and wrap it up in a memfd
   This would be useful to allow a uniform interface for operations.

   Instead of providing both an interface for operating on memory,
   and an interface for operating on file descriptors,
   we could just have a single interface that operates on file descriptors.

   Anyone who wants to operate on memory has to wrap it up in a memfd first.
** An argument to exec that lists FDs that shouldn't be closed, even if they're CLOEXEC
   This way we don't have to unset CLOEXEC from FDs if we want them to be inherited.

   This has two use cases:
   - We can then use execveat(fd, AT_EMPTY_PATH) to execute scripts (i.e., executables using #!).
     Without this, we have to mark the FD as not CLOEXEC, so it will be leaked and implicitly inherited,
     which is not good.
   - A task that is currently sharing its file descriptor space with other tasks
     will be able to call exec and pass down fds;
     currently that's not safely possible, because they would have to unset CLOEXEC on fds,
     which might cause them to be leaked by other concurrently executing tasks in the same fd table.

   execveat even has a remaining argument left, so we could add it :)
** being able to pass a NULL name to memfd_create
   Requiring memory to allocate memory makes it impossible to bootstrap memory allocate using memfd_create.
** add a MAP_DONT_ROUND flag for mmap to not round the length and offset to page size
   Currently we will round them to the page size,
   and the page size depends on the arguments and what kind of file descriptor we're mapping.

   But because mmap rounds the length up,
   munmap on the resulting mapping won't work with the mapping we pass in.

   We'd rather fail to mmap than get a mapping that unexpectedly can't be munmap'd.

   If we get a file descriptor passed to us from someone else,
   that file descriptor might have a larger page size than we expect,
   so if we mmap that file descriptor it will unexpectedly silently round up,
   and then munmap won't work.

   Plus we probably also want an fcntl to get the page size.

   Also, this MAP_DONT_ROUND flag should require that we pass MAP_HUGETLB and the right size bits
   if we're mapping a hugetlb file descriptor;
   otherwise we'd run into the bug mentioned in the bug section below.
** Allow CLONE_PARENT for container inits
   It's already possible to make siblings of a container init,
   and any other process can call CLONE_PARENT whenever it wants.

   So, let's not bother disallowing it.
   Since it's useful for me, since I can have my parent monitor my children centrally, instead of me...
   And it allows for more correctness possibly:
   since I can maybe avoid process child waiting raciness by just having,
   when I waitid,
   everything is from orphans.

   Although, if CLONE_PARENT will cause our parent to have children that are immediately killed on pidns collapse,
   without leaving a zombie to detect it,
   maybe we don't want that.
   So that's another feature: Don't have processes in a pidns be killed without leaving a zombie,
   if their parent is outside the pidns!
** put additional flags in accept4(flags) to accept only specific sock types
   If I can just put additional flags in accept4,
   that allows me to conveniently do additional typechecking of my accept.

   It may sound absurd, but it's the same as nsenter.

   Then I can make sure that the address buffer is the right size, without oversizing it,
   and also I'll be sure that I know how to parse the address buffer.

   On the other hand, this would kind of be bad for capability-safe generic processing stuff...
** at-functions should operate on the fd when a null pointer is passed for the pathname
   They shouldn't require you to allocate memory for an empty path if you just want to operate on file descriptors. :(
** for processes in a pidns, if the parent is outside the pidns, don't reap the zombie when init dies
   This is useful when using unshare(CLONE_NEWPID).
   In that situation, we can make init as one of our children,
   and then keep forking children into the pidns,
   and get nice cleanup behavior like we want in http://catern.com/process.html.

   But, if init dies, then all of our children die - that's good,
   except we don't get their death event, because their zombies are automatically reaped!

   So our naive program that was just starting children in a pid namespace without being modified,
   now is faced with a terrible surprise when it starts getting ECHILD from all its waitpids,
   or never otherwise gets notified of child death.
** prctl to set cloexec for every new fd
   I'm not sure that I'll get it right.
** MSG_WAITALL for send
   Then we could implement syscall sending so simply!
   also memory access!
* possible kernel bugs
** remove old confusing comment from dequeue_signal
   in signal.c

   It just wasn't removed in b8fceee17a310f189188599a8fa5e9beaff57eb0 when it should have been
** MMAP_GROWSDOWN doesn't work
   It doesn't grow. Possibly deliberately, in which case this is a man-pages bug.
** CLONE_CHILD_CLEARTID work if you don't pass CLONE_VM
   Even if the address is in shared memory (mapped with MAP_SHARED, same inode and everything in both processes),
   it doesn't do a futex wakeup.

   This is because it skips the wakeup if the number of mm owners being 1.
** CLONE_CHILD_SETTID doesn't work work without CLONE_VM
   That is, it doesn't work when the child is in a different address space. Not sure why...
** munmap works differently on hugetlb files
   This means that if I control the file that some userspace program mmaps,
   I can ensure that their later munmap will fail.

   That seems at least good enough for a userspace denial of service,
   and possibly could even cause security problems.
** CLONE_SIGHAND + CLONE_NEWPID don't work right together (see pidns.c)
   signal(SIGCHLD, SIG_IGN) seems to be set in the parent when I kill the pid namespace init (my child).

   So I don't get the SIGCHLD signal.

   More than that, even if I have the SIGCHLD signal blocked in the parent, it doesn't get set as pending to me.

   Strange, strange.
** epoll with EPOLLET doesn't report up-edges if the down-edge has already happened
   I bet epoll doesn't actually send me every edge.

   I guess I can test this.
   
   blaaah

   argh this makes sense, and it applies even more clearly for level triggered
   if the epollfd is readable, and then it's not readable, i'll be screwed.

   nesting epolls doesn't really work


   aaargh

   so the scenario is as follows:

   add readable pipe fd to epollfd with EPOLLIN|EPOLLET
   select() or poll() or nested-epoll on the epollfd, see that the epollfd is readable
   read from pipe fd until EAGAIN
   read from epollfd, get no events, boo!

   ok whatever i guess this can also happen with signalfd

   couldn't fixing it cause bugs?

   after all...

   if in response to an epoll readability notification,
   you perform a blocking read on a pipe FD A,
   as is currently safe...

   so, the fix would make it so that,
   if you add stream socket FD A to an epollfd (with EPOLLIN|EPOLLET),
   then the FD becomes readable,
   and you happen to perform a nonblocking read to flush anything remaining in the pipe buffer,
   then the next time you wait on the epollfd, with a fix, you would get an EPOLLIN event.

   without the fix, getting the EPOLLIN event means it's safe to perform a *blocking* read,
   so you might go ahead and do that,
   and then deadlock.

   the people in #kernelnewbies said to report a bug so I guess I will

#+begin_quote
> argh
> epollfd has an annoying behavior where if an FD registered on it becomes readable, the epollfd will indicates as readable when checked with select/poll/another epoll instance...
> but if the FD is read to EAGAIN before the epollfd is epoll_waited on, you won't actually get an event for it, and the epoll_wait will block
<sarnold> that sounds squarely in the "do not do that" category to me
> well - I would expect that if an fd A is marked as readable, that performing seemingly totally separate operations before "reading" fd A, would not cause fd A to longer be readable
> but thinking about it, I guess you could probably get a similar behavior from signalfd if you unblocked the signals it's monitoring before reading it
> but I still think it's pretty weird for EPOLLET to effectively drop events - my mental model for epoll in edge-triggered mode was that I'm getting a stream of *all* the edges
> not just the edges that happen to be "visible" at the time I epoll_wait
<ukleinek> catern: sounds like a bug to me
> (I seem to also recall reading, possibly in some manpage or maybe TLPI, that when readability is indicated on an FD, it's safe to perform at least one blocking read, though maybe that's only for pipe/stream sockets... bah)
> pipes*
> ukleinek: well... I worry that fixing it could cause bugs, in fact
<ukleinek> catern: escalate it to the right maintainer?
> hmm, who would be the right maintainer for epoll? it isn't listed in MAINTAINERS
> I guess I'd just send it to lkml, linux-api, and CC some people who've recently touched epoll?
<derRichard> catern: btw: did you check https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/?
<derRichard> maybe it covers your case
<derRichard> epoll is very hard to use right
<derRichard> it is full of pitfalls
> yes, I saw it, and I disagree with that article :)
> IMO it's perfectly straightforward to use if you use EPOLLET and you don't try to rely on auto-closing
> you just have to have a proper ownership model, so that fds registered on epoll can't be closed without going through epoll
<derRichard> yeah
<derRichard> and if you know that, you better report a bug
#+end_quote
