* desirable kernel features
** notification of exec (more specifically: mm_release) through wait
   This way we can detect when a child task/thread has called exec,
   and free any resources they had.
   Otherwise there's no way to know for sure that they're done execing.

   This is like CLONE_CHILD_CLEARTID,
   but that only has a futex interface,
   which is not suitable for an event loop.

   Currently I'm just starting one thread to monitor each futex,
   which duplicates the number of threads I run.

   ptrace doesn't work because ptrace sucks and break gdb/strace.

   Passing down one end of a cloexec pipe doesn't work because if we're a CLONE_FILES thread calling exec,
   the end will still be open in other threads.

   Using futexes from a normal event loop sucks.

   vfork is kind of similar but sucks.

   I think this would allow an asynchronous posix_spawn.

   Currently posix_spawn *must* take over the thread to use vfork.
   But if you want to spawn another thread to do it...

   ugh then I guess you can just do that, spawn another thread and then posix_spawn.

   Oh but that messes up your child relationship! So yeah, you can't do that!
** a CLONE_DO_CLOEXEC flag to pass to clone, to close CLOEXEC fds
   This would be good and useful.

   Though we can do it in userspace, it's ugly and requires creating an extra thread for full correctness.

   And it would be simple.
   Just need to call do_close_on_exec.

   oh god, clone really is out of flags
** sigkill-resilient filicide
   Maybe, like, the combination of supervise and PDEATHSIG?

   Except, we'd want like,
   CHILDDEATHSIG...
   a signal to send to your children when you die.

   If we want to combine this with a better proc interface,
   we could maybe have some kind of childgroupfd,
   which when closed, kills all the children in that group.

   We can't realistically enforce things the same way capsicum does,
   which is to ban usage of non-forkfd process creation.
   Also I don't think that's robust to loops anyway.

   Oh, the same is true for the childgroupfd then.
   Well, no, they can create childgroupfd within them, but,
   they're still contained in the childgroupfd.

   Oh! Let's just have an inheritable PDEATHSIG which can't be unset!
   That's easier conceptually.
   Though, reparenting will still happen before the actual signalling, which is awkward.

   Maybe I should have the inheritable PDEATHSIG thing partnered with a clonefd?
   And the inheritable PDEATHSIG doesn't kill things made with clonefd.
   That way you can make pseudo-persistent processes which live past a tree's death.

   There are several things we want:
   - it should work to kill legacy processes that don't use this API
   - there should be a means for processes to still daemonize if we want to allow that

   A childgroupfd does actually meet these.
   If we have a childgroupfd,
   all the children in it can be killed when we close it,
   but not if they are inside their own childgroupfd.

   Like process groups, but as a file descriptor?
   Hmm, that seems like a nice idea.

   So you can escape the process group easily, is the thing?
   Maybe we have a flag, "escapable" or not.

   Of course, escaping will just require that something has a reference to its own process group fd.
   oh, capsicum doesn't support passing process fds
** remove old confusing comment from dequeue_signal
   in signal.c

   It just wasn't removed in b8fceee17a310f189188599a8fa5e9beaff57eb0 when it should have been
** bindat, connectat
   Would be nice to be able to pass a dirfd for these. And also lift the length limit.
** some way to deal with fd inheritance?
   CLOUNSHARE?
** the ability to take existing memory and wrap it up in a memfd
   This would be useful to allow a uniform interface for operations.

   Instead of providing both an interface for operating on memory,
   and an interface for operating on file descriptors,
   we could just have a single interface that operates on file descriptors.

   Anyone who wants to operate on memory has to wrap it up in a memfd first.
** clone_child_settid doesn't seem to work without clone_vm
   i.e. it doesn't work when the child is in a different address space
** exec needs to take a list of fds
   fds that it should pass down through exec.

   Even if they are cloexec.

   Then cloexec can be inherited.

   This allows us to use execveat on scripts and things.

   We just put the fd in the pass-down list.

   Of equal relevance, this also allows shared-fd-space tasks to exec and pass down fds.
   (otherwise they can't remove cloexec because it's racy)

   Hey, and exec has a remaining argument left!
   We could add it!
** make connect(Address), accept(FileDescriptor) symmetric
   i.e. so it's connect(FileDescriptor) and accept(FileDescriptor)
** unify connect/accept with passing file descriptors
   This would be a nice design...

   Even better would be to unify it also with openat.

   Then there'd be only one ways to get a file descriptor:
   Use openat on another file descriptor.

   (well, and also by passing it in)
** being able to pass a NULL name to memfd_create
   Requiring memory to allocate memory makes it impossible to bootstrap memory allocate using memfd_create.
** add a MAP_DONT_ROUND flag for mmap to not round the length and offset to page size
   Currently we will round them to the page size,
   and the page size depends on the arguments and what kind of file descriptor we're mapping.

   But because mmap rounds the length up,
   munmap on the resulting mapping won't work with the mapping we pass in.

   We'd rather fail to mmap,
   than get a mapping that unexpectedly can't be munmap'd.

   If we get a file descriptor passed to us from someone else,
   that file descriptor might have a larger page size than we expect,
   so if we mmap that file descriptor it will unexpectedly silently round up,
   and then munmap won't work.

   Plus we probably also want an fcntl to get the page size.

   Ah, and also this flag should probably require that we pass MAP_HUGETLB and the right size bits
   if we're mapping a hugetlb file descriptor.
   That way we won't accidentally pass the correct length?
   I guess if we accidentally pass the correct length then it's fine.

   Still probably should require the right size bits.
** CLONE_PARENT doesn't need to be disallowed for container inits
   It's already possible to make siblings of a container init,
   and any other process can call CLONE_PARENT whenever it wants.

   So, let's not bother disallowing it.
   Since it's useful for me, since I can have my parent monitor my children centrally, instead of me...
   And it allows for more correctness possibly:
   since I can maybe avoid process child waiting raciness by just having,
   when I waitid,
   everything is from orphans.

   Although, if CLONE_PARENT will cause our parent to have children that are immediately killed on pidns collapse,
   without leaving a zombie to detect it,
   maybe we don't want that.
   So that's another feature: Don't have processes in a pidns be killed without leaving a zombie,
   if their parent is outside the pidns!
** put additional flags in accept4(flags) to accept only specific sock types
   If I can just put additional flags in accept4,
   that allows me to conveniently do additional typechecking of my accept.

   similar to nsenter.

   Then I can make sure that the address buffer is the right size, without oversizing it,
   and also know how to parse it.
** at-functions should operate on the fd when a null pointer is passed for the pathname
   That way I don't have to allocate memory for them :(
** for processes in a pidns, if the parent is outside the pidns, don't reap the zombie when init dies
   This is useful when using unshare(CLONE_NEWPID).
   In that situation, we can make init as one of our children,
   and then keep forking children into the pidns.

   But, if init dies, then all of our children die - that's good,
   except we don't get their death event, because their zombies are automatically reaped!

   So our naive program that was just starting children in a pid namespace without being modified,
   now is faced with a terrible surprise when it starts getting ECHILD from all its waitpids,
   or never otherwise gets notified of child death.

   This doesn't work!
** prctl to set cloexec for every new fd
   I'm not sure that I'll get it right.
** MSG_WAITALL for send
   then we could implement syscall sending so simply!
   also memory access!
* possible kernel bugs
** MMAP_GROWSDOWN doesn't seem to work
   It doesn't grow.
** CLONE_CHILD_CLEARTID doesn't seem to work if you don't pass CLONE_VM
   Even if the address is in shared memory (mapped with MAP_SHARED, same inode and everything in both processes),
   it doesn't seem to do a futex wakeup.

   Didn't yet check whether the address is cleared or not - probably not.

   Oh, this is probably due to the number of mm owners being 1.
   It skips the wakeup in that case. Infuriatingly...
** (possibly creates userspace bugs) munmap works differently on hugetlb files
   This means that if I control the file that some userspace program mmaps,
   I can ensure that their later munmap will fail.

   That seems at least good enough for a denial of service,
   and possibly could even cause security problems.
** epoll with EPOLLET doesn't report up-edges if the down-edge has already happened
   I bet epoll doesn't actually send me every edge.

   I guess I can test this.
   
   blaaah

   argh this makes sense, and it applies even more clearly for level triggered
   if the epollfd is readable, and then it's not readable, i'll be screwed.

   nesting epolls doesn't really work


   aaargh

   so the scenario is as follows:

   add readable pipe fd to epollfd with EPOLLIN|EPOLLET
   select() or poll() or nested-epoll on the epollfd, see that the epollfd is readable
   read from pipe fd until EAGAIN
   read from epollfd, get no events, boo!

   ok whatever i guess this can also happen with signalfd

   couldn't fixing it cause bugs?

   after all...

   if in response to an epoll readability notification,
   you perform a blocking read on a pipe FD A,
   as is currently safe...

   so, the fix would make it so that,
   if you add stream socket FD A to an epollfd (with EPOLLIN|EPOLLET),
   then the FD becomes readable,
   and you happen to perform a nonblocking read to flush anything remaining in the pipe buffer,
   then the next time you wait on the epollfd, with a fix, you would get an EPOLLIN event.

   without the fix, getting the EPOLLIN event means it's safe to perform a *blocking* read,
   so you might go ahead and do that,
   and then deadlock.

   the people in #kernelnewbies said to report a bug so I guess I will

> argh
> epollfd has an annoying behavior where if an FD registered on it becomes readable, the epollfd will indicates as readable when checked with select/poll/another epoll instance...
> but if the FD is read to EAGAIN before the epollfd is epoll_waited on, you won't actually get an event for it, and the epoll_wait will block
<sarnold> that sounds squarely in the "do not do that" category to me
> well - I would expect that if an fd A is marked as readable, that performing seemingly totally separate operations before "reading" fd A, would not cause fd A to longer be readable
> but thinking about it, I guess you could probably get a similar behavior from signalfd if you unblocked the signals it's monitoring before reading it
> but I still think it's pretty weird for EPOLLET to effectively drop events - my mental model for epoll in edge-triggered mode was that I'm getting a stream of *all* the edges
> not just the edges that happen to be "visible" at the time I epoll_wait
<ukleinek> catern: sounds like a bug to me
> (I seem to also recall reading, possibly in some manpage or maybe TLPI, that when readability is indicated on an FD, it's safe to perform at least one blocking read, though maybe that's only for pipe/stream sockets... bah)
> pipes*
> ukleinek: well... I worry that fixing it could cause bugs, in fact
<ukleinek> catern: escalate it to the right maintainer?
> hmm, who would be the right maintainer for epoll? it isn't listed in MAINTAINERS
> I guess I'd just send it to lkml, linux-api, and CC some people who've recently touched epoll?
<derRichard> catern: btw: did you check https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/?
<derRichard> maybe it covers your case
<derRichard> epoll is very hard to use right
<derRichard> it is full of pitfalls
> yes, I saw it, and I disagree with that article :)
> IMO it's perfectly straightforward to use if you use EPOLLET and you don't try to rely on auto-closing
> you just have to have a proper ownership model, so that fds registered on epoll can't be closed without going through epoll
<derRichard> yeah
<derRichard> and if you know that, you better report a bug
** CLONE_SIGHAND + CLONE_NEWPID don't work right together (see pidns.c)
   signal(SIGCHLD, SIG_IGN) seems to be set in the parent when I kill the pid namespace init (my child).

   So I don't get the SIGCHLD signal.

   More than that, even if I have the SIGCHLD signal blocked in the parent, it doesn't get set as pending to me.

   Strange, strange.
